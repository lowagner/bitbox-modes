#!/usr/bin/env python2

starting_index = 0

characters = [
   ["*  *", # null
    " ** ",
    " ** ",
    "*  *"],
   [" ** ", # half sine wave
    "*  *",
    "    ",
    "    "],
   ["    ", # second half sine wave
    "    ",
    "*  *",
    " ** "],
   ["   *", # part of saw wave
    "  **",
    " *  ",
    "*   "],
   ["   *", # second part of saw wave
    "  * ",
    "**  ",
    "*   "],
   ["    ", # first part of square
    "    ",
    "    ",
    " ***"],
   ["****", # second part of square wave
    "*   ",
    "*   ",
    "*   "],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["    ", # ' '
    "    ",
    "    ",
    "    "],
   [" *  ", # !
    " *  ",
    "    ",
    " *  "],
   ["* * ", # "
    "* * ",
    "    ",
    "    "],
   [" * *", # #
    "****",
    " * *",
    "****"],
   [" ***", # $
    "* * ",
    " * *",
    "*** "],
   ["** *", # %
    "* * ",
    " * *",
    "* **"],
   [" ** ", # &
    "****",
    "* * ",
    " ** "],
   [" *  ", # '
    " *  ",
    "    ",
    "    "],
   [" ** ", # (
    "**  ",
    "**  ",
    " ** "],
   [" ** ", # )
    "  **",
    "  **",
    " ** "],
   [" * *", # *
    "  * ",
    " * *",
    "    "],
   ["  * ", # +
    " ***",
    "  * ",
    "    "],
   ["    ", # ,
    "    ",
    " ** ",
    "  * "],
   ["    ", # -
    " ***",
    "    ",
    "    "],
   ["    ", # .
    "    ",
    " ** ",
    " ** "],
   ["   *", # /
    "  * ",
    " *  ",
    "*   "],
   ["****", # 0
    "** *",
    "** *",
    "****"],
   ["*** ", # 1
    " ** ",
    " ** ",
    "****"],
   ["*** ", # 2
    "  **",
    "**  ",
    "****"],
   ["****", # 3
    " ***",
    "   *",
    "****"],
   ["* **", # 4
    "****",
    "  **",
    "  **"],
   ["****", # 5
    "*** ",
    "  **",
    "*** "],
   ["****", # 6
    "**  ",
    "* **",
    "****"],
   ["****", # 7
    "  **",
    " ** ",
    " ** "],
   ["*** ", # 8
    "* **",
    "** *",
    " ***"],
   ["****", # 9
    "** *",
    "  **",
    "****"],
   [" *  ", # :
    "    ",
    " *  ",
    "    "],
   [" *  ", # ;
    "    ",
    " ** ",
    "  * "],
   ["  * ", # <
    " *  ",
    "  * ",
    "    "],
   [" ***", # =
    "    ",
    " ***",
    "    "],
   [" *  ", # >
    "  * ",
    " *  ",
    "    "],
   ["**  ", # ?
    "  * ",
    " ** ",
    "*   "],
   ["****", # @
    "   *",
    "** *",
    "****"],
   [" ** ", # A
    "* **",
    "****",
    "* **"],
   ["*** ", # B
    "* **",
    "** *",
    "****"],
   [" ***", # C
    "*** ",
    "*** ",
    " ***"],
   ["*** ", # D
    "** *",
    "** *",
    "*** "],
   ["****", # E
    "*** ",
    "**  ",
    "****"],
   ["****", # F
    "**  ",
    "*** ",
    "**  "],
   [" ***", # G
    "**  ",
    "** *",
    "****"],
   ["* **", # H
    "****",
    "* **",
    "* **"],
   ["****", # I
    " ** ",
    " ** ",
    "****"],
   ["****", # J
    "  **",
    "  **",
    "*** "],
   ["** *", # K
    "*** ",
    "** *",
    "** *"],
   ["**  ", # L
    "**  ",
    "**  ",
    "****"],
   ["****", # M
    "****",
    "* **",
    "*  *"],
   ["** *", # N
    "** *",
    "* **",
    "* **"],
   [" ** ", # O
    "** *",
    "** *",
    " ** "],
   ["****", # P
    "** *",
    "****",
    "**  "],
   ["****", # Q
    "*  *",
    "* **",
    "****"],
   ["*** ", # R
    "** *",
    "*** ",
    "* **"],
   ["****", # S
    "**  ",
    "  **",
    "****"],
   ["****", # T
    " ** ",
    " ** ",
    " ** "],
   ["* **", # U
    "* **",
    "* **",
    "****"],
   ["** *", # V
    "** *",
    "*** ",
    " *  "],
   ["*  *", # W
    "** *",
    "****",
    "****"],
   ["** *", # X
    "  * ",
    "** *",
    "** *"],
   ["** *", # Y
    "** *",
    " ** ",
    " **"],
   ["****", # Z
    "  **",
    "**  ",
    "****"],
   ["*** ", # [
    "**  ",
    "**  ",
    "*** "],
   ["*   ", # \
    " *  ",
    "  * ",
    "   *"],
   [" ***", # ]
    "  **",
    "  **",
    " ***"],
   ["  * ", # ^
    " * *",
    "    ",
    "    "],
   ["    ", # _
    "    ",
    "    ",
    "****"],
   [" *  ", # `
    "  * ",
    "    ",
    "    "],
   ["    ", # a
    " ***",
    "* **",
    "****"],
   ["**  ", # b
    "*** ",
    "** *",
    "*** "],
   ["    ",
    " ***", # c
    "**  ",
    " ***"],
   ["  **", # d
    " ***",
    "* **",
    " ***"],
   [" ** ", # e
    "** *",
    "*** ",
    " ***"],
   [" ***", # f
    "**  ",
    "*** ",
    "**  "],
   [" ** ", # g
    "* **",
    " ***",
    "*** "],
   ["**  ", # h
    "**  ",
    "****",
    "** *"],
   [" ** ", # i
    "    ",
    " ** ",
    " ***"],
   ["  **", # j
    "    ",
    "  **",
    "****"],
   ["**  ", # k
    "** *",
    "*** ",
    "** *"],
   [" ** ", # l
    " ** ",
    " ** ",
    " ** "],
   ["    ", # m
    "****",
    "* **",
    "*  *"],
   ["    ", # n
    "*** ",
    "** *",
    "** *"],
   ["    ", # o
    " ** ",
    "** *",
    " ** "],
   ["*** ", # p
    "** *",
    "*** ",
    "**  "],
   [" ***", # q
    "* **",
    " ***",
    "  **"],
   ["    ", # r
    "*** ",
    "** *",
    "**  "],
   ["    ",
    " ***", # s
    " ** ",
    "*** "],
   [" ** ", # t
    "****",
    " ** ",
    " ***"],
   ["    ", # u
    "* **",
    "* **",
    "****"],
   ["    ", # v
    "** *",
    "*** ",
    " *  "],
   ["    ",
    "*  *", # w
    "** *",
    "****"],
   ["    ", # x
    "** *",
    "  * ",
    "** *"],
   ["    ", # y
    " * *",
    " ***",
    "***"],
   ["    ", # z
    "*** ",
    " ** ",
    " ***"],
   [" ** ", # {
    "**  ",
    " *  ",
    " ** "],
   ["  * ", # |
    "  * ",
    "  * ",
    "    "],
   [" ** ", # }
    "  **",
    "  * ",
    " ** "],
   ["   *", # ~
    " ***",
    " *  ",
    "    "],
   ["    ", # 127
    " ** ",
    " ** ",
    "    "],
   [" ** ", # integral
    " *  ",
    " *  ",
    "**  "],
   ["****", # Gamma (skip Alpha, Beta, they look like A, B)
    "**  ",
    "**  ",
    "**  "],
   ["  * ", # Delta
    " * *",
    "** *",
    "****"],
   ["****", # Theta (skip Epsilon, Zeta, Eta, they look like E, Z, H)
    "** *",
    "* **",
    "****"],
   [" *  ", # Lambda (skip Iota, Kappa, they look like l, K)
    "* * ",
    "* **",
    "* **"],
   ["****", # Xi (skip Mu, Nu, they look like M, N)
    " ** ",
    "    ",
    "****"],
   ["****", # Pi (skip Omicron, it looks like O)
    "* **",
    "* **",
    "* **"],
   ["****", # Sigma (skip Rho, it looks like P)
    " ** ",
    "*   ",
    "****"],
   ["* **", # Phi (skip Tau, Upsilon, they look like T, Y)
    " * *",
    "* * ",
    "** *"],
   ["*  *", # Psi (skip Chi, it looks like X)
    "* * ",
    " *  ",
    "* **"],
   [" ** ", # Omega
    "*  *",
    "** *",
    "** *"],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["   *", # alpha
    " ** ",
    "* * ",
    "** *"],
   [" ** ", # beta
    " ** ",
    " * *",
    "****"],
   ["*  *", # gamma
    " ** ",
    "* * ",
    "**  "],
   [" *  ", # delta
    " ** ",
    "* **",
    " ** "],
   [" ** ", # epsilon
    " ***",
    "*   ",
    " ** "],
   [" ***", # zeta
    "*   ",
    "*** ",
    "   * "],
   ["*** ", # eta
    "*  *",
    "*  *",
    "   * "],
   [" ** ", # theta
    "** *",
    "* **",
    " ** "],
   ["    ", # iota
    " ** ",
    " ** ",
    " ** "],
   ["    ", # kappa
    "** *",
    "*** ",
    "** *"],
   ["**  ", # lambda
    "  * ",
    " * *",
    "*  *"],
   ["    ", # mu
    "*  *",
    "****",
    "   *"],
   ["    ", # nu
    "** *",
    " ** ",
    " *  "],
   ["**  ", # xi
    "*** ",
    "*   ",
    " ***"],
   ["    ", # skip omicron, go to pi
    "****",
    "* * ",
    "* * "],
   ["  * ", # rho 
    " * *",
    " ** ",
    "**  "],
   ["    ", # sigma (circle)
    " ***",
    "* * ",
    " *  "],
   [" ** ", # sigma (open)
    "*   ",
    " ***",
    "   *"],
   ["    ", # tau
    "****",
    " ** ",
    " ** "],
   ["    ", # upsilon
    "*  *",
    " * *",
    " ** "],
   ["*   ", # phi
    " ** ",
    " ** ",
    "   *"],
   ["** *", # chi
    " ** ",
    "* * ",
    "  **"],
   [" * *", # psi
    " ** ",
    " ***",
    "*   "],
   ["    ", # omega
    "*  *",
    "** *",
    " ** "],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["", 
    "",
    "",
    ""],
   ["    ", # 240 -> zero
    "    ",
    "    ",
    "    "],
   ["    ", 
    "    ",
    "    ",
    "****"],
   ["    ", 
    "    ",
    "****",
    "    "],
   ["    ", 
    "    ",
    "****",
    "****"],
   ["    ", 
    "****",
    "    ",
    "    "],
   ["    ", 
    "****",
    "    ",
    "****"],
   ["    ", 
    "****",
    "****",
    "    "],
   ["    ", 
    "****",
    "****",
    "****"],
   ["****", 
    "    ",
    "    ",
    "    "],
   ["****", 
    "    ",
    "    ",
    "****"],
   ["****", 
    "    ",
    "****",
    "    "],
   ["****", 
    "    ",
    "****",
    "****"],
   ["****", 
    "****",
    "    ",
    "    "],
   ["****", 
    "****",
    "    ",
    "****"],
   ["****", 
    "****",
    "****",
    "    "],
   ["****", 
    "****",
    "****",
    "****"],
]

with open("font.c", 'w') as f:
    f.write("#include \"bitbox.h\"\n#include \"common.h\"\n#include \"font.h\"\n#include <string.h> // strlen\n")
    f.write("uint16_t font[256] CCM_MEMORY;\n")
    f.write("uint16_t font_cache[256] = {\n")
    if starting_index:
        f.write("[%d]="%starting_index)
    else:
        f.write("  ")
    for i in range(len(characters)):
        char = characters[i]
        x = 0
        for j in range(len(char)):
            power = 4*j
            for c in char[j]:
                if c != ' ':
                    x |= 1<<power
                power += 1
        if i + 1 == len(characters):
            f.write("%d\n"%x)
        else:
            f.write("%d,\n  "%x)
    f.write("};\n")
    if len(characters) + starting_index > 256:
        print "WARNING, overflow!"
    f.write("""
void font_init()
{
    memcpy(font, font_cache, sizeof(font_cache));
}

void font_render_line_doubled(const uint8_t *text, int x, int y, uint16_t color_fg, uint16_t color_bg)
{
    #ifdef EMULATOR
    if (y < 0 || y >= 8)
    {
        message("got too big a line count for text (%s):  %d\\n", text, y);
        return;
    }
    if (x < 0 || x + 9*strlen((char *)text) >= SCREEN_W)
    {
        message("text (%s) goes off screen!\\n", text);
        return;
    }
    #endif
    y = ((y/2))*4; // make y now how much to shift
    uint16_t *dst = draw_buffer + x;
    uint16_t color_choice[2] = { color_bg, color_fg };
    *dst = color_choice[0];
    --text;
    int c;
    while ((c = *(++text)))
    {
        uint8_t row = (font[c] >> y) & 15;
        for (int j=0; j<4; ++j)
        {
            *(++dst) = color_choice[row&1];
            *(++dst) = color_choice[row&1];
            row >>= 1;
        }
        *(++dst) = color_choice[0];
    }
}

void font_render_no_bg_line_doubled(const uint8_t *text, int x, int y, uint16_t color_fg)
{
    #ifdef EMULATOR
    if (y < 0 || y >= 8)
    {
        message("got too big a line count for text (%s):  %d\\n", text, y);
        return;
    }
    if (x < 0 || x + 9*strlen((char *)text) >= SCREEN_W)
    {
        message("text (%s) goes off screen!\\n", text);
        return;
    }
    #endif
    y = ((y/2))*4; // make y now how much to shift
    uint16_t *dst = draw_buffer + x;
    --text;
    int c;
    while ((c = *(++text)))
    {
        uint8_t row = (font[c] >> y) & 15;
        for (int j=0; j<4; ++j)
        {
            if (row&1)
            {
                *(++dst) = color_fg;
                *(++dst) = color_fg;
            }
            else
            {
                dst += 2;
            }
            row >>= 1;
        }
        ++dst;
    }
}
"""
)


with open("font.h", 'w') as f:
    f.write("#ifndef FONT_H\n#define FONT_H\n#include <stdint.h>\n")
    f.write("extern uint16_t font_cache[256];\nextern uint16_t font[256];\nvoid font_init();\nvoid font_render_line_doubled(const uint8_t *text, int x, int y, uint16_t color_fg, uint16_t color_bg);\n")
    f.write("void font_render_no_bg_line_doubled(const uint8_t *text, int x, int y, uint16_t color_fg);\n");
    f.write("#endif\n")
